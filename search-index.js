var searchIndex = {};
searchIndex["redfa"] = {"doc":"","items":[[0,"regex","redfa","",null,null],[4,"Regex","redfa::regex","A regular expression over the alphabet `T`.",null,null],[13,"Null","","The null set. This never matches anything.",0,null],[13,"Empty","","The empty string (matches exactly &quot;&quot;).",0,null],[13,"Except","","Matches any single character except the listed ones.",0,null],[13,"Alt","","Alternation (also known as disjunction). Matches any of the contained\ncharacters, as well as any string matched by a contained regex.",0,null],[13,"And","","Conjunction. Matches iff all contained regexes match.",0,null],[13,"Not","","Negation. Matches iff the contained regex does not match.",0,null],[13,"Cat","","Concatenation. Matches iff the contained regexes match in sequence.",0,null],[13,"Kleene","","Kleene closure. Matches zero or more repetitions of the contained regex.",0,null],[4,"ParseError","","",null,null],[13,"UnexpectedEof","","",1,null],[13,"UnexpectedChar","","",1,null],[13,"BadRange","","",1,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"normalize","","",0,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"from_str","","Parse a string as a regular expression.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"nullable","","Tests whether a regular expression is nullable, i.e. whether it matches\nthe empty string.",0,null],[0,"derivatives","redfa","",null,null],[3,"Derivatives","redfa::derivatives","The set of some object&#39;s derivatives with respect to an alphabet `T`.",null,null],[12,"d","","Holds a set of pairs `(chars, derivative)`, meaning that the derivative\nwith respect to any element of `chars` is `derivative`.",2,null],[12,"rest","","The derivative with respect to any character not listed in `d`.",2,null],[8,"Differentiable","","A trait for types which can be differentiated with respect to an alphabet\n`T`.",null,null],[10,"derivative","","",3,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"map","","",2,null],[11,"derivative","redfa::regex","",0,null],[0,"dfa","redfa","",null,null],[3,"State","redfa::dfa","A state in a DFA.",null,null],[12,"by_char","","Labelled transitions.",4,null],[12,"default","","The default transition (for values not in `by_char`).\nNote that `by_char` is assumed not to cover the entire alphabet (`T`).",4,null],[12,"value","","A value associated with the state.",4,null],[3,"Dfa","","A deterministic finite automaton (DFA), over the alphabet `T`.\nEach state is annotated with a value of type `V`.\nState 0 is the starting state.",null,null],[12,"states","","The list of states.",5,null],[8,"Normalize","","",null,null],[10,"normalize","","",6,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"from_derivatives","","Construct a DFA from a list of differentiable objects.\nThe elements of `initial` form the first states of the DFA.\nReturns the DFA, together with a mapping from derivatives to state numbers.",5,null],[11,"map","","Apply a function to each state&#39;s value.",5,null],[11,"reverse","","Find the reverse transitions from each state in the DFA.",5,null],[11,"minimize","","Minimize a DFA; i.e. find a DFA with the fewest states that is\nequivalent to the given DFA.\nTwo DFAs are equivalent if, given the same string, they always lead to a\nstate with the same associated value.",5,null],[11,"eq","","",5,null],[11,"equiv","","Compare DFAs by language equality.",5,null]],"paths":[[4,"Regex"],[4,"ParseError"],[3,"Derivatives"],[8,"Differentiable"],[3,"State"],[3,"Dfa"],[8,"Normalize"]]};
searchIndex["bit_set"] = {"doc":"An implementation of a set using a bit vector as an underlying\nrepresentation for holding unsigned numerical elements.","items":[[3,"BitSet","bit_set","",null,null],[3,"Iter","","An iterator for `BitSet`.",null,null],[3,"Union","","",null,null],[3,"Intersection","","",null,null],[3,"Difference","","",null,null],[3,"SymmetricDifference","","",null,null],[11,"clone","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"eq","","",0,null],[11,"new","","Creates a new empty `BitSet`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates a new `BitSet` with initially no contents, able to\nhold `nbits` elements without resizing.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_bit_vec","","Creates a new `BitSet` from the given bit vector.",0,{"inputs":[{"name":"bitvec"}],"output":{"name":"self"}}],[11,"from_bytes","","",0,null],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",0,null],[11,"reserve_len","","Reserves capacity for the given `BitSet` to contain `len` distinct elements. In the case\nof `BitSet` this means reallocations will not occur as long as all inserted elements\nare less than `len`.",0,null],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `BitSet` to contain `len` distinct elements.\nIn the case of `BitSet` this means reallocations will not occur as long as all inserted\nelements are less than `len`.",0,null],[11,"into_bit_vec","","Consumes this set to return the underlying bit vector.",0,null],[11,"get_ref","","Returns a reference to the underlying bit vector.",0,null],[11,"shrink_to_fit","","Truncates the underlying vector to the least length required.",0,null],[11,"iter","","Iterator over each usize stored in the `BitSet`.",0,null],[11,"union","","Iterator over each usize stored in `self` union `other`.\nSee [union_with](#method.union_with) for an efficient in-place version.",0,null],[11,"intersection","","Iterator over each usize stored in `self` intersect `other`.\nSee [intersect_with](#method.intersect_with) for an efficient in-place version.",0,null],[11,"difference","","Iterator over each usize stored in the `self` setminus `other`.\nSee [difference_with](#method.difference_with) for an efficient in-place version.",0,null],[11,"symmetric_difference","","Iterator over each usize stored in the symmetric difference of `self` and `other`.\nSee [symmetric_difference_with](#method.symmetric_difference_with) for\nan efficient in-place version.",0,null],[11,"union_with","","Unions in-place with the specified other bit vector.",0,null],[11,"intersect_with","","Intersects in-place with the specified other bit vector.",0,null],[11,"difference_with","","Makes this bit vector the difference with the specified other bit vector\nin-place.",0,null],[11,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other\nbit vector in-place.",0,null],[11,"len","","Returns the number of set bits in this set.",0,null],[11,"is_empty","","Returns whether there are no bits set in this set",0,null],[11,"clear","","Clears all bits in this set",0,null],[11,"contains","","Returns `true` if this set contains the specified integer.",0,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",0,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",0,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",0,null],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",0,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",0,null],[11,"fmt","","",0,null],[11,"hash","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next","","",2,null],[11,"size_hint","","",2,null],[11,"next","","",3,null],[11,"size_hint","","",3,null],[11,"next","","",4,null],[11,"size_hint","","",4,null],[11,"next","","",5,null],[11,"size_hint","","",5,null]],"paths":[[3,"BitSet"],[3,"Iter"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"]]};
searchIndex["bit_vec"] = {"doc":"Collections implemented with bit vectors.","items":[[3,"BitVec","bit_vec","The bitvector type.",null,null],[3,"Iter","","An iterator for `BitVec`.",null,null],[3,"IntoIter","","",null,null],[3,"Blocks","","An iterator over the blocks of a `BitVec`.",null,null],[8,"BitBlock","","Abstracts over a pile of bits (basically unsigned primitives)",null,null],[10,"bits","","How many bits it has",0,{"inputs":[],"output":{"name":"usize"}}],[11,"bytes","","How many bytes it has",0,{"inputs":[],"output":{"name":"usize"}}],[10,"from_byte","","Convert a byte into this type (lowest-order bits set)",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[10,"count_ones","","Count the number of 1&#39;s in the bitwise repr",0,null],[10,"zero","","Get `0`",0,{"inputs":[],"output":{"name":"self"}}],[10,"one","","Get `1`",0,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",1,null],[11,"new","","Creates an empty `BitVec`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"from_elem","","Creates a `BitVec` that holds `nbits` elements, setting each element\nto `bit`.",1,{"inputs":[{"name":"usize"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_capacity","","Constructs a new, empty `BitVec` with the specified capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_bytes","","Transforms a byte-vector into a `BitVec`. Each byte becomes eight bits,\nwith the most significant bits of each byte coming first. Each\nbit becomes `true` if equal to 1 or `false` if equal to 0.",1,null],[11,"from_fn","","Creates a `BitVec` of the specified length where the value at each index\nis `f(index)`.",1,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"self"}}],[11,"blocks","","Iterator over the underlying blocks of data",1,null],[11,"storage","","Exposes the raw block storage of this BitVec",1,null],[11,"storage_mut","","Exposes the raw block storage of this BitVec",1,null],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",1,null],[11,"set","","Sets the value of a bit at an index `i`.",1,null],[11,"set_all","","Sets all bits to 1.",1,null],[11,"negate","","Flips all bits.",1,null],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or`\nfunction.",1,null],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the\nbitwise `and` function.",1,null],[11,"difference","","Calculates the difference between two bitvectors.",1,null],[11,"all","","Returns `true` if all bits are 1.",1,null],[11,"iter","","Returns an iterator over the elements of the vector in order.",1,null],[11,"none","","Returns `true` if all bits are 0.",1,null],[11,"any","","Returns `true` if any bit is 1.",1,null],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the\n`BitVec` becomes the high-order bit of the first byte. If the\nsize of the `BitVec` is not a multiple of eight then trailing bits\nwill be filled-in with `false`.",1,null],[11,"eq_vec","","Compares a `BitVec` to a slice of `bool`s.\nBoth the `BitVec` and slice must have the same length.",1,null],[11,"truncate","","Shortens a `BitVec`, dropping excess elements.",1,null],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given\n`BitVec`. The collection may reserve more space to avoid frequent reallocations.",1,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the\ngiven `BitVec`. Does nothing if the capacity is already sufficient.",1,null],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",1,null],[11,"grow","","Grows the `BitVec` in-place, adding `n` copies of `value` to the `BitVec`.",1,null],[11,"pop","","Removes the last bit from the BitVec, and returns it. Returns None if the BitVec is empty.",1,null],[11,"push","","Pushes a `bool` onto the end.",1,null],[11,"len","","Returns the total number of bits in this vector",1,null],[11,"set_len","","Sets the number of bits that this BitVec considers initialized.",1,null],[11,"is_empty","","Returns true if there are no bits in this vector",1,null],[11,"clear","","Clears all bits in this vector.",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",1,null],[11,"clone","","",1,null],[11,"clone_from","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"fmt","","",1,null],[11,"hash","","",1,null],[11,"eq","","",1,null],[11,"clone","","",2,null],[11,"next","","",2,null],[11,"size_hint","","",2,null],[11,"next_back","","",2,null],[11,"next","","",3,null],[11,"next_back","","",3,null],[11,"into_iter","","",1,null],[11,"clone","","",4,null],[11,"next","","",4,null],[11,"size_hint","","",4,null],[11,"next_back","","",4,null]],"paths":[[8,"BitBlock"],[3,"BitVec"],[3,"Iter"],[3,"IntoIter"],[3,"Blocks"]]};
searchIndex["vec_map"] = {"doc":"A simple map based on a vector for small integer keys. Space requirements\nare O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the\nvalues being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",0,null],[13,"Occupied","","An occupied Entry",0,null],[11,"clone","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"vecmap"}}],[11,"hash","","",1,null],[11,"new","","Creates an empty `VecMap`.",1,{"inputs":[],"output":{"name":"vecmap"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",1,{"inputs":[{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",1,null],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",1,null],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",1,null],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator&#39;s element type is `usize`.",1,null],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator&#39;s element type is `&amp;&#39;r V`.",1,null],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r V)`.",1,null],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r mut V)`.",1,null],[11,"split_off","","Splits the collection into two at the given key.",1,null],[11,"len","","Returns the number of elements in the map.",1,null],[11,"is_empty","","Returns true if the map contains no elements.",1,null],[11,"clear","","Clears the map, removing all key-value pairs.",1,null],[11,"get","","Returns a reference to the value corresponding to the key.",1,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,null],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",1,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",1,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",1,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and\nreturns a mutable reference to the value in the entry.",0,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default\nfunction if empty, and returns a mutable reference to the value in the\nentry.",0,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",2,null],[11,"get","","Gets a reference to the value in the entry.",3,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",3,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,null],[11,"fmt","","",1,null],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"vecmap"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r V)`.",1,null],[11,"extend","","",1,null],[11,"extend","","",1,null],[11,"index","","",1,null],[11,"index","","",1,null],[11,"index_mut","","",1,null],[11,"index_mut","","",1,null],[11,"clone","","",4,null],[11,"next","","",4,null],[11,"size_hint","","",4,null],[11,"next_back","","",4,null],[11,"next","","",5,null],[11,"size_hint","","",5,null],[11,"next_back","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"next","","",6,null],[11,"size_hint","","",6,null],[11,"next_back","","",6,null],[11,"next","","",7,null],[11,"size_hint","","",7,null],[11,"next_back","","",7,null],[11,"next","","",8,null],[11,"size_hint","","",8,null],[11,"next_back","","",8,null]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"IntoIter"]]};
initSearch(searchIndex);
